import asyncio
import httpx
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "8194473719:AAGv2nAUpEFRDd4_L0ufE95CMuZ3omhrniE"
DATA_FILE = "subscriptions.json"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ============ FSM ============
class AddSub(StatesGroup):
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_currency = State()
    waiting_for_day = State()

class MonthCurrency(StatesGroup):
    waiting_for_currency = State()

# ============ JSON ============
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_after_add_keyboard(lang="ru") -> InlineKeyboardMarkup:
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    button_texts = {
        "ru": ["üëâ –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏", "üè† –í –º–µ–Ω—é"],
        "uz": ["üëâ Yana qo‚Äòshish", "üìã Barcha obunalarni ko‚Äòrish", "üè† Menyuga"],
        "en": ["üëâ Add more", "üìã Show all subscriptions", "üè† Main menu"]
    }

    texts = button_texts.get(lang, button_texts["ru"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts[0], callback_data="add_more")],
        [InlineKeyboardButton(text=texts[1], callback_data="show_list")],
        [InlineKeyboardButton(text=texts[2], callback_data="main_menu")]
    ])
    return keyboard

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø ======
@dp.callback_query(lambda c: c.data == "add_more")
async def add_more_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await add_subscription(callback.message, state)  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞

@dp.callback_query(F.data == "show_list")
async def show_subs(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()

    user_id = str(callback.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"subs": [], "lang": "ru"})
    subs = user_data.get("subs", [])
    lang = user_data.get("lang", "ru")

    if not subs:
        texts = {
            "ru": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ üí°",
            "uz": "Sizda hali obunalar yo‚Äòq üí°",
            "en": "You don't have any subscriptions üí°"
        }
        await callback.message.answer(texts.get(lang, texts["ru"]))
        return

    headers = {
        "ru": "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n",
        "uz": "üìã Sizning obunalaringiz:\n\n",
        "en": "üìã Your subscriptions:\n\n"
    }

    text = headers.get(lang, headers["ru"])

    # –≤—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    max_name_len = max(len(s.get("name", "")) for s in subs)
    max_price_len = max(len(str(s.get("price", ""))) for s in subs)

    lines = []
    for i, s in enumerate(subs, start=1):
        name = s.get("name", "")
        price = str(s.get("price", ""))
        currency = s.get("currency", "")
        day = s.get("day", "")

        if lang == "ru":
            line = f"{i}. {name.ljust(max_name_len)} ‚Äî {price.rjust(max_price_len)} {currency} ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ {day} —á–∏—Å–ª–∞"
        elif lang == "uz":
            line = f"{i}. {name.ljust(max_name_len)} ‚Äî {price.rjust(max_price_len)} {currency} ‚Äî to‚Äòlov {day} kuni"
        else:
            line = f"{i}. {name.ljust(max_name_len)} ‚Äî {price.rjust(max_price_len)} {currency} ‚Äî billing on {day}"

        lines.append(line)

    formatted_text = "<pre>" + text + "\n".join(lines) + "</pre>"

    await callback.message.answer(formatted_text, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await start(callback.message, state)

CANCEL_LINKS = {
    "Netflix": "https://www.netflix.com/cancelplan",
    "netflix": "https://www.netflix.com/cancelplan",
    "Spotify": "https://support.spotify.com/article/cancel-your-subscription/",
    "spotify": "https://support.spotify.com/article/cancel-your-subscription/",
    "YouTube Premium": "https://support.google.com/youtube/answer/6306276",
    "youtube premium": "https://support.google.com/youtube/answer/6306276",
    "YouTube": "https://support.google.com/youtube/answer/6306276",
    "youtube": "https://support.google.com/youtube/answer/6306276",
    "Adobe": "https://account.adobe.com/plans",
    "adobe": "https://account.adobe.com/plans",
    "ChatGPT": "https://help.openai.com/en/articles/6825453-how-do-i-cancel-my-subscription",
    "chatgpt": "https://help.openai.com/en/articles/6825453-how-do-i-cancel-my-subscription",
    "HBO Max": "https://www.hbomax.com/account/cancel",
    "hbo max": "https://www.hbomax.com/account/cancel",
    "Disney+": "https://www.disneyplus.com/cancel",
    "disney+": "https://www.disneyplus.com/cancel",
    "Amazon Prime": "https://www.amazon.com/gp/help/customer/display.html?nodeId=201910960",
    "amazon prime": "https://www.amazon.com/gp/help/customer/display.html?nodeId=201910960",
    "Apple Music": "https://support.apple.com/en-us/HT202039",
    "apple music": "https://support.apple.com/en-us/HT202039",
    "Tidal": "https://support.tidal.com/hc/en-us/articles/215855847-Cancel-your-TIDAL-subscription",
    "tidal": "https://support.tidal.com/hc/en-us/articles/215855847-Cancel-your-TIDAL-subscription",
    "–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "—è–Ω–¥–µ–∫—Å –ø–ª—é—Å": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "–Ø–Ω–¥–µ–∫—Å": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "—è–Ω–¥–µ–∫—Å": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "Yandex Plus": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "yandex plus": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "Yandex": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "yandex": "https://yandex.ru/support/plus-ru/ru/manage/unsubscribe",
    "Bolt Plus": "https://bolt.eu/legal/bolt-plus",
    "bolt plus": "https://bolt.eu/legal/bolt-plus",
    "PayMe": "https://play.google.com/store/apps/details?id=uz.dida.payme",
    "payme": "https://play.google.com/store/apps/details?id=uz.dida.payme",
    "Okko": "https://help.okko.tv/subs/cancel",
    "okko": "https://help.okko.tv/subs/cancel",
    "Ivi": "https://www.ivi.ru/profile/subscription",
    "ivi": "https://www.ivi.ru/profile/subscription",
    "Kion": "https://kion.ru/help/abonements",
    "kion": "https://kion.ru/help/abonements",
    "VK –ú—É–∑—ã–∫–∞": "https://vk.com/settings?act=payments",
    "vk –º—É–∑—ã–∫–∞": "https://vk.com/settings?act=payments",
    "VK Music": "https://vk.com/settings?act=payments",
    "vk music": "https://vk.com/settings?act=payments",
    "–õ–∏—Ç–†–µ—Å": "https://www.litres.ru/cabinet/subscriptions/",
    "–ª–∏—Ç—Ä–µ—Å": "https://www.litres.ru/cabinet/subscriptions/",
    "LitRes": "https://www.litres.ru/cabinet/subscriptions/",
    "litres": "https://www.litres.ru/cabinet/subscriptions/",
    "PlayStation Plus": "https://www.playstation.com/en-us/support/subscriptions/cancel-playstation-plus/",
    "playstation plus": "https://www.playstation.com/en-us/support/subscriptions/cancel-playstation-plus/",
    "Nintendo Switch Online": "https://www.nintendo.com/account/billing/",
    "nintendo switch online": "https://www.nintendo.com/account/billing/",
    "EA Play": "https://help.ea.com/en/help/account/manage-your-subscription/",
    "ea play": "https://help.ea.com/en/help/account/manage-your-subscription/",
    "Microsoft 365": "https://account.microsoft.com/services/",
    "microsoft 365": "https://account.microsoft.com/services/",
    "Adobe Creative Cloud": "https://account.adobe.com/plans",
    "adobe creative cloud": "https://account.adobe.com/plans",
    "Figma": "https://help.figma.com/hc/en-us/articles/360039956134-Billing-and-payments",
    "figma": "https://help.figma.com/hc/en-us/articles/360039956134-Billing-and-payments",
    "Notion": "https://www.notion.so/my-integrations/billing",
    "notion": "https://www.notion.so/my-integrations/billing",
    "Uzdigital TV": "https://uzdtv.uz/ru/login",
    "uzdigital tv": "https://uzdtv.uz/ru/login"
}

# ============ /start ============
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="üá∫üáø O‚Äòzbekcha", callback_data="lang_uz")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
    ])
    await message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang / Choose your language:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]
    user_id = str(callback.from_user.id)
    data = load_data()
    if user_id not in data or isinstance(data[user_id], list):
        data[user_id] = {"subs": [], "lang": lang}
    else:
        data[user_id]["lang"] = lang
    save_data(data)
    texts = {
        "ru": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/list ‚Äî —Å–ø–∏—Å–æ–∫\n/month ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü\n/soon ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "uz": "‚úÖ Til o‚Äòrnatildi: O‚Äòzbekcha\n\nBuyruqlar:\n/add ‚Äî obuna qo‚Äòshish\n/list ‚Äî obunalar ro‚Äòyxati\n/month ‚Äî oylik xarajatlar\n/soon ‚Äî yaqin to‚Äòlovlar\n/cancel ‚Äî obunani bekor qilish",
        "en": "‚úÖ Language set: English\n\nCommands:\n/add ‚Äî add a subscription\n/list ‚Äî list of subscriptions\n/month ‚Äî monthly expenses\n/soon ‚Äî upcoming payments\n/cancel ‚Äî cancel subscription"
    }
    await callback.message.answer(texts[lang])
    await callback.answer()

# ============ /add ============
@dp.message(Command("add"))
async def add_subscription(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    user_data = load_data().get(user_id, {"subs": [], "lang": "ru"})
    lang = user_data.get("lang", "ru")

    prompts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix):",
        "uz": "Obuna nomini kiriting (masalan, Netflix):",
        "en": "Enter subscription name (e.g., Netflix):"
    }
    await message.answer(prompts.get(lang, prompts["ru"]))
    await state.set_state(AddSub.waiting_for_name)


# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ ======
@dp.message(AddSub.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"subs": [], "lang": "ru"})
    lang = user_data.get("lang", "ru")
    subs = user_data.get("subs", [])

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    duplicate_texts = {
        "ru": f"‚ö† –ü–æ–¥–ø–∏—Å–∫–∞ '{name}' —É–∂–µ –µ—Å—Ç—å. –•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å?",
        "uz": f"‚ö† '{name}' obunasi allaqachon mavjud. Uni yangilamoqchimisiz?",
        "en": f"‚ö† Subscription '{name}' already exists. Do you want to replace it?"
    }
    prompt_price_texts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.99):",
        "uz": "Obuna narxini kiriting (masalan, 10.99):",
        "en": "Enter subscription price (e.g., 10.99):"
    }

    # –ö–Ω–æ–ø–∫–∏ "–î–∞ / –ù–µ—Ç"
    button_texts = {
        "ru": ["‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å", "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å"],
        "uz": ["‚úÖ Ha, yangilash", "‚ùå Yo'q, qoldirish"],
        "en": ["‚úÖ Yes, replace", "‚ùå No, keep"]
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    if any(s.get("name", "").lower() == name.lower() for s in subs):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=button_texts.get(lang, button_texts["ru"])[0],
                callback_data=f"replace_yes_{name}"
            ),
            InlineKeyboardButton(
                text=button_texts.get(lang, button_texts["ru"])[1],
                callback_data=f"replace_no_{name}"
            )
        ]])
        await state.update_data(duplicate_name=name)
        sent = await message.answer(duplicate_texts.get(lang, duplicate_texts["ru"]), reply_markup=keyboard)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
        await state.update_data(duplicate_msg_id=sent.message_id)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await state.update_data(name=name)
    await message.answer(prompt_price_texts.get(lang, prompt_price_texts["ru"]))
    await state.set_state(AddSub.waiting_for_price)


# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç ======
@dp.callback_query(F.data.startswith("replace_"))
async def process_replace_decision(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("duplicate_name")
    user_id = str(callback.from_user.id)
    all_data = load_data()
    user_data = all_data.get(user_id, {"subs": [], "lang": "ru"})
    lang = user_data.get("lang", "ru")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        msg_id = data.get("duplicate_msg_id")
        if msg_id:
            await callback.bot.delete_message(chat_id=user_id, message_id=msg_id)
    except Exception:
        pass  # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback.data.startswith("replace_yes_"):
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É
        user_data["subs"] = [s for s in user_data["subs"] if s.get("name", "").lower() != name.lower()]
        await state.update_data(name=name)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:")
        await state.set_state(AddSub.waiting_for_price)
    else:
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚úÖ")
        await state.clear()


# ====== –ü–æ—Å–ª–µ —Ü–µ–Ω—ã ‚Äî –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏ ======
@dp.message(AddSub.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 12.5")
        return

    await state.update_data(price=price)

    # –ö–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üá∫üá∏ USD", callback_data="currency_usd"),
        InlineKeyboardButton(text="üá∫üáø UZS", callback_data="currency_uzs")
    ]])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=keyboard)


# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ ======
@dp.message(AddSub.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"subs": [], "lang": "ru"})
    lang = user_data.get("lang", "ru")
    subs = user_data.get("subs", [])

    duplicate_texts = {
        "ru": f"‚ö† –ü–æ–¥–ø–∏—Å–∫–∞ '{name}' —É–∂–µ –µ—Å—Ç—å. –•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å?",
        "uz": f"‚ö† '{name}' obunasi allaqachon mavjud. Uni yangilamoqchimisiz?",
        "en": f"‚ö† Subscription '{name}' already exists. Do you want to replace it?"
    }
    prompt_price_texts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.99):",
        "uz": "Obuna narxini kiriting (masalan, 10.99):",
        "en": "Enter subscription price (e.g., 10.99):"
    }

    button_texts = {
        "ru": ["‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å", "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å"],
        "uz": ["‚úÖ Ha, yangilash", "‚ùå Yo'q, qoldirish"],
        "en": ["‚úÖ Yes, replace", "‚ùå No, keep"]
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if any(s.get("name", "").lower() == name.lower() for s in subs):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=button_texts.get(lang, button_texts["ru"])[0],
                callback_data=f"replace_yes_{name}"
            ),
            InlineKeyboardButton(
                text=button_texts.get(lang, button_texts["ru"])[1],
                callback_data=f"replace_no_{name}"
            )
        ]])
        await state.update_data(duplicate_name=name)
        await message.answer(duplicate_texts.get(lang, duplicate_texts["ru"]), reply_markup=keyboard)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await state.update_data(name=name)
    await message.answer(prompt_price_texts.get(lang, prompt_price_texts["ru"]))
    await state.set_state(AddSub.waiting_for_price)


# ====== Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ ¬´–î–∞/–ù–µ—Ç¬ª ======
@dp.callback_query(lambda c: c.data.startswith("replace_"))
async def process_replace(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    parts = callback.data.split("_", 2)
    action = parts[1]  # yes / no
    duplicate_name = parts[2]
    user_id = str(callback.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"subs": [], "lang": "ru"})
    subs = user_data.get("subs", [])
    lang = user_data.get("lang", "ru")

    deleted_texts = {
        "ru": f"–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{duplicate_name}' —É–¥–∞–ª–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:",
        "uz": f"'{duplicate_name}' obunasi o‚Äòchirildi. Yangi obuna nomini kiriting:",
        "en": f"Old subscription '{duplicate_name}' removed. Enter the name of the new subscription:"
    }
    kept_texts = {
        "ru": f"–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{duplicate_name}' –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚úÖ",
        "uz": f"'{duplicate_name}' obunasi saqlandi ‚úÖ",
        "en": f"Old subscription '{duplicate_name}' kept ‚úÖ"
    }

    if action == "yes":
        subs = [s for s in subs if s.get("name", "").lower() != duplicate_name.lower()]
        user_data["subs"] = subs
        data[user_id] = user_data
        save_data(data)
        await state.clear()
        await callback.message.answer(deleted_texts.get(lang, deleted_texts["ru"]))
        await state.set_state(AddSub.waiting_for_name)
    else:
        await callback.message.answer(kept_texts.get(lang, kept_texts["ru"]))
        await state.clear()


# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ======
@dp.message(AddSub.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    try:
        price = float(str(message.text.strip()).replace(" ", "").replace(",", "."))
    except ValueError:
        texts = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 12.5",
            "uz": "Raqam kiriting, masalan 12.5",
            "en": "Enter a number, e.g., 12.5"
        }
        await message.answer(texts.get(lang, texts["ru"]))
        return

    await state.update_data(price=price)

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíµ USD", callback_data="currency_usd"),
            InlineKeyboardButton(text="üá∫üáø UZS", callback_data="currency_uzs")
        ]
    ])

    texts = {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        "uz": "Valyutani tanlang:",
        "en": "Choose currency:"
    }
    await message.answer(texts.get(lang, texts["ru"]), reply_markup=keyboard)
    await state.set_state(AddSub.waiting_for_currency)


# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã ======
@dp.callback_query(F.data.startswith("currency_"))
async def process_currency_choice(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    currency = "USD" if callback.data == "currency_usd" else "UZS"
    await state.update_data(currency=currency)

    # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ç—Ä—ë—Ö —è–∑—ã–∫–∞—Ö
    texts_currency = {
        "ru": f"‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {currency}",
        "uz": f"‚úÖ Valyuta tanlandi: {currency}",
        "en": f"‚úÖ Currency set: {currency}"
    }

    texts_day = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è (1‚Äì31):",
        "uz": "To‚Äòlov kunini kiriting (1‚Äì31):",
        "en": "Enter the billing day (1‚Äì31):"
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(texts_currency.get(lang, texts_currency["ru"]))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    await callback.message.answer(texts_day.get(lang, texts_day["ru"]))

    await state.set_state(AddSub.waiting_for_day)

@dp.message(AddSub.waiting_for_currency)
async def process_currency(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    currency = message.text.strip().upper()
    if currency not in ["USD", "UZS"]:
        texts = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ USD –∏–ª–∏ UZS:",
            "uz": "Faqat USD yoki UZS kiriting:",
            "en": "Enter only USD or UZS:"
        }
        await message.answer(texts.get(lang, texts["ru"]))
        return

    await state.update_data(currency=currency)
    texts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è (1‚Äì31):",
        "uz": "To‚Äòlov kunini kiriting (1‚Äì31):",
        "en": "Enter the billing day (1‚Äì31):"
    }

    msg = await message.answer(texts.get(lang, texts["ru"]))
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã "–Ω–µ –º–∞–∑–æ–ª–∏–ª–æ –≥–ª–∞–∑–∞"
    try:
        await message.delete()
    except Exception:
        pass

    await state.set_state(AddSub.waiting_for_day)


@dp.message(AddSub.waiting_for_day)
async def process_day(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–Ω—è
    try:
        day = int(message.text.strip())
        if not (1 <= day <= 31):
            raise ValueError
    except ValueError:
        texts = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (1‚Äì31):",
            "uz": "To‚Äòlov kunini to‚Äòg‚Äòri kiriting (1‚Äì31):",
            "en": "Enter a valid day of the month (1‚Äì31):"
        }
        await message.answer(texts.get(lang, texts["ru"]))
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    sub_data = await state.get_data()

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    name = sub_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    price = sub_data.get("price", 0)
    currency = sub_data.get("currency", "USD")

    user_data = data.get(user_id, {"subs": [], "lang": lang})
    subs = user_data.get("subs", [])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subs.append({
        "name": name,
        "price": price,
        "currency": currency,
        "day": day,
        "start": datetime.now().strftime("%Y-%m-%d"),
        "last_notified": None
    })

    user_data["subs"] = subs
    data[user_id] = user_data
    save_data(data)
    await state.clear()

    # ‚ùå –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –£–ë–†–ê–ù–û

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    texts_added = {
        "ru": f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüé¨ {name} ‚Äî {price} {currency} / –º–µ—Å\nüí≥ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {day} —á–∏—Å–ª–∞\n\n‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 24 —á–∞—Å–∞ –¥–æ –¥–∞—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è.",
        "uz": f"‚úÖ Obuna qo‚Äòshildi!\n\nüé¨ {name} ‚Äî {price} {currency} / oy\nüí≥ Keyingi to‚Äòlov: {day}-kun\n\n‚ÑπÔ∏è Xabarnoma to‚Äòlovdan 24 soat oldin keladi.",
        "en": f"‚úÖ Subscription added!\n\nüé¨ {name} ‚Äî {price} {currency} / month\nüí≥ Next payment: day {day}\n\n‚ÑπÔ∏è Notification will arrive 24 hours before the payment date."
    }
    await message.answer(texts_added.get(lang, texts_added["ru"]),
                         reply_markup=get_after_add_keyboard(lang))

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ä–∞–∑—É
    now = datetime.now()
    today = now.day
    tomorrow = (now + timedelta(days=1)).day

    if day in [today, tomorrow]:
        texts_notify = {
            "ru": f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–°–∫–æ—Ä–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ <b>{name}</b>.",
            "uz": f"üîî Eslatma!\nTez orada <b>{name}</b> obunasi uchun to‚Äòlov.",
            "en": f"üîî Reminder!\nUpcoming payment for subscription <b>{name}</b>."
        }
        notify_text = texts_notify.get(lang, texts_notify["ru"])
        if day == today:
            notify_text += {"ru": "\nüí∞ –û–ø–ª–∞—Ç–∞ ‚Äî <b>—Å–µ–≥–æ–¥–Ω—è!</b>",
                            "uz": "\nüí∞ To‚Äòlov ‚Äî <b>bugun!</b>",
                            "en": "\nüí∞ Payment ‚Äî <b>today!</b>"}[lang]
        else:
            notify_text += {"ru": "\nüìÖ –û–ø–ª–∞—Ç–∞ ‚Äî <b>–∑–∞–≤—Ç—Ä–∞!</b>",
                            "uz": "\nüìÖ To‚Äòlov ‚Äî <b>ertaga!</b>",
                            "en": "\nüìÖ Payment ‚Äî <b>tomorrow!</b>"}[lang]

        await message.answer(notify_text, parse_mode="HTML")

        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        subs[-1]["last_notified"] = str(now.date())
        data[user_id] = user_data
        save_data(data)

# ============ /list ============
@dp.message(Command("list"))
async def list_subscriptions(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])

    no_subs_text = {
        "ru": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ üí°",
        "uz": "Sizda hozircha obunalar yo‚Äòq üí°",
        "en": "You have no subscriptions yet üí°"
    }

    if not subs:
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        return

    header = {
        "ru": "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n",
        "uz": "üìã Sizning obunalaringiz:\n\n",
        "en": "üìã Your subscriptions:\n\n"
    }

    text = header.get(lang, header["ru"])

    # ---- –≤—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è ----
    max_name_len = max(len(s.get("name", "")) for s in subs)
    max_price_len = max(len(str(s.get("price", ""))) for s in subs)

    lines = []
    for i, s in enumerate(subs, start=1):
        name = s.get("name", "")
        price = s.get("price", "")
        currency = s.get("currency", "")
        day = s.get("day", "")

        if lang == "ru":
            line = f"{i}. {name.ljust(max_name_len)} ‚Äî {str(price).rjust(max_price_len)} {currency} ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ {day} —á–∏—Å–ª–∞"
        elif lang == "uz":
            line = f"{i}. {name.ljust(max_name_len)} ‚Äî {str(price).rjust(max_price_len)} {currency} ‚Äî to‚Äòlov {day} kuni"
        else:
            line = f"{i}. {name.ljust(max_name_len)} ‚Äî {str(price).rjust(max_price_len)} {currency} ‚Äî payment on day {day}"

        lines.append(line)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º <pre> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatted_text = "<pre>" + text + "\n".join(lines) + "</pre>"

    await message.answer(formatted_text, parse_mode="HTML")


import httpx

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ USD ‚Üí UZS
async def fetch_usd_to_uzs():
    global USD_to_UZS
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("https://open.er-api.com/v6/latest/USD")
            data = response.json()
            USD_to_UZS = data["rates"]["UZS"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD‚ÜíUZS: {e}")
        USD_to_UZS = 11500  # –∑–∞–ø–∞—Å–Ω–æ–π –∫—É—Ä—Å

# ============ /month ============
@dp.message(Command("month"))
async def month_expenses_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    prompt_text = {
        "ru": "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã? (USD –∏–ª–∏ UZS)\nüí° –ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ UZS –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ USD, —Å—É–º–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É.",
        "uz": "Xarajatlarni qaysi valyutada ko‚Äòrsatish? (USD yoki UZS)\nüí° Agar USDdagi obuna uchun UZSni tanlasangiz, summa joriy kurs bo‚Äòyicha hisoblanadi.",
        "en": "In which currency to show expenses? (USD or UZS)\nüí° If you choose UZS for a subscription in USD, the amount will be converted at the current rate."
    }
    await message.answer(prompt_text.get(lang, prompt_text["ru"]))
    await state.set_state(MonthCurrency.waiting_for_currency)

@dp.message(MonthCurrency.waiting_for_currency)
async def month_expenses_calc(message: types.Message, state: FSMContext):
    currency_choice = message.text.strip().upper()
    if currency_choice not in ["USD", "UZS"]:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ USD –∏–ª–∏ UZS / Faqat USD yoki UZS kiriting / Enter only USD or UZS")
        return

    user_id = str(message.from_user.id)
    user_data = load_data().get(user_id, {})
    lang = user_data.get("lang", "ru")
    subs = user_data.get("subs", [])

    if not subs:
        no_subs_text = {
            "ru": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            "uz": "Sizda faollashgan obunalar yo‚Äòq.",
            "en": "You have no active subscriptions."
        }
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
    await fetch_usd_to_uzs()

    total = 0.0
    for s in subs:
        price = float(str(s.get("price", 0)).replace(" ", "").replace(",", "."))
        sub_currency = s.get("currency", "USD").upper()
        if sub_currency != currency_choice:
            if sub_currency == "USD" and currency_choice == "UZS":
                price *= USD_to_UZS
            elif sub_currency == "UZS" and currency_choice == "USD":
                price /= USD_to_UZS
        total += price

    total_text = {
        "ru": f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {total:.2f} {currency_choice}",
        "uz": f"üí∞ Oy davomida umumiy xarajatlar: {total:.2f} {currency_choice}",
        "en": f"üí∞ Total monthly expenses: {total:.2f} {currency_choice}"
    }
    await message.answer(total_text.get(lang, total_text["ru"]))
    await state.clear()

@dp.message(MonthCurrency.waiting_for_currency)
async def month_expenses_calc(message: types.Message, state: FSMContext):
    currency_choice = message.text.strip().upper()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    if currency_choice not in ["USD", "UZS"]:
        invalid_text = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ USD –∏–ª–∏ UZS:",
            "uz": "Faqat USD yoki UZS kiriting:",
            "en": "Enter only USD or UZS:"
        }
        await message.answer(invalid_text.get(lang, invalid_text["ru"]))
        return

    subs = data.get(user_id, {}).get("subs", [])
    if not subs:
        no_subs_text = {
            "ru": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            "uz": "Sizda faollashtirilgan obunalar yo‚Äòq.",
            "en": "You have no active subscriptions."
        }
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        await state.clear()
        return

    total = 0.0
    for s in subs:
        price = float(str(s.get("price", 0)).replace(" ", "").replace(",", "."))
        sub_currency = s.get("currency", "USD").upper()
        if sub_currency != currency_choice:
            price = price * USD_to_UZS if sub_currency == "USD" else price / USD_to_UZS
        total += price

    total_text = {
        "ru": f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {total:.2f} {currency_choice}",
        "uz": f"üí∞ Oy bo‚Äòyicha umumiy xarajatlar: {total:.2f} {currency_choice}",
        "en": f"üí∞ Total expenses for the month: {total:.2f} {currency_choice}"
    }
    await message.answer(total_text.get(lang, total_text["ru"]))
    await state.clear()

@dp.message(Command("soon"))
async def soon_subscriptions(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])

    no_subs_text = {
        "ru": "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ üí°",
        "uz": "Sizda obunalar yo‚Äòq üí°",
        "en": "You have no subscriptions üí°"
    }

    if not subs:
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        return

    now = datetime.now()
    soon_list = []
    for s in subs:
        try:
            day = int(s.get("day", 0))
        except ValueError:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —á–∏—Å–ª–æ
        delta = day - now.day
        if 0 <= delta <= 7:
            soon_list.append((s.get("name"), day, delta))

    no_soon_text = {
        "ru": "üìÜ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ—Ç.",
        "uz": "üìÜ Ushbu haftada to‚Äòlovlar yo‚Äòq.",
        "en": "üìÜ No payments this week."
    }

    if not soon_list:
        await message.answer(no_soon_text.get(lang, no_soon_text["ru"]))
        return

    header_text = {
        "ru": "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è:\n",
        "uz": "üìÖ Yaqin to‚Äòlovlar:\n",
        "en": "üìÖ Upcoming payments:\n"
    }

    text = header_text.get(lang, header_text["ru"])
    for name, day, delta in soon_list:
        if lang == "ru":
            if delta == 0:
                text += f"‚Äî {name}: —Å–µ–≥–æ–¥–Ω—è\n"
            elif delta == 1:
                text += f"‚Äî {name}: –∑–∞–≤—Ç—Ä–∞ ({day} —á–∏—Å–ª–æ)\n"
            else:
                text += f"‚Äî {name}: —á–µ—Ä–µ–∑ {delta} –¥–Ω. ({day} —á–∏—Å–ª–æ)\n"
        elif lang == "uz":
            if delta == 0:
                text += f"‚Äî {name}: bugun\n"
            elif delta == 1:
                text += f"‚Äî {name}: ertaga ({day}-kun)\n"
            else:
                text += f"‚Äî {name}: {delta} kunda ({day}-kun)\n"
        else:  # en
            if delta == 0:
                text += f"‚Äî {name}: today\n"
            elif delta == 1:
                text += f"‚Äî {name}: tomorrow (day {day})\n"
            else:
                text += f"‚Äî {name}: in {delta} days (day {day})\n"

    await message.answer(text)

# ============ /cancel ============
@dp.message(Command("cancel"))
async def choose_cancel_subscription(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])
    valid_subs = [s for s in subs if isinstance(s, dict) and "name" in s]

    no_subs_text = {
        "ru": "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã üòå",
        "uz": "Sizda bekor qilinadigan obunalar yo‚Äòq üòå",
        "en": "You have no subscriptions to cancel üòå"
    }

    choose_text = {
        "ru": "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å:",
        "uz": "Bekor qilmoqchi bo‚Äòlgan obunani tanlang:",
        "en": "Choose a subscription to cancel:"
    }

    if not valid_subs:
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=sub["name"], callback_data=f"cancel_{sub['name']}")] for sub in valid_subs]
    )
    await message.answer(choose_text.get(lang, choose_text["ru"]), reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("cancel_"))
async def process_cancel_callback(callback: types.CallbackQuery):
    await callback.answer()
    sub_name = callback.data.replace("cancel_", "")
    user_id = str(callback.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])

    sub_to_remove = next((s for s in subs if isinstance(s, dict) and s.get("name") == sub_name), None)

    not_found_text = {
        "ru": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòÖ",
        "uz": "Obuna topilmadi üòÖ",
        "en": "Subscription not found üòÖ"
    }

    if not sub_to_remove:
        await callback.message.edit_text(not_found_text.get(lang, not_found_text["ru"]), parse_mode="HTML")
        return

    cancel_link = CANCEL_LINKS.get(sub_name)

    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subs = [s for s in subs if not (isinstance(s, dict) and s.get("name") == sub_name)]
    data[user_id]["subs"] = subs
    save_data(data)

    deleted_text = {
        "ru": f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ '{sub_name}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚úÖ</b>",
        "uz": f"<b>'{sub_name}' obunasi ro‚Äòyxatdan o‚Äòchirildi ‚úÖ</b>",
        "en": f"<b>Subscription '{sub_name}' removed from the list ‚úÖ</b>"
    }

    if cancel_link:
        link_text = {
            "ru": f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã {sub_name}:</b>\n{cancel_link}\n\n–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
            "uz": f"üîó <b>{sub_name} obunasini bekor qilish havolasi:</b>\n{cancel_link}\n\nObuna o‚Äòchirildi ‚úÖ",
            "en": f"üîó <b>Cancel link for {sub_name}:</b>\n{cancel_link}\n\nSubscription removed ‚úÖ"
        }
        await callback.message.edit_text(link_text.get(lang, link_text["ru"]), parse_mode="HTML")
    else:
        await callback.message.edit_text(deleted_text.get(lang, deleted_text["ru"]), parse_mode="HTML")

# ============ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –∫–æ–º–∞–Ω–¥ ============
@dp.message(F.text.regexp(r"^/"))
async def handle_any_command(message: types.Message, state: FSMContext):
    await state.clear()
    cmd = message.text.lower()
    if cmd.startswith("/add"):
        await add_subscription(message, state)
    elif cmd.startswith("/list"):
        await list_subscriptions(message, state)
    elif cmd.startswith("/month"):
        await month_expenses_start(message, state)
    elif cmd.startswith("/soon"):
        await soon_subscriptions(message, state)
    elif cmd.startswith(("/cancel", "/menu", "/start")):
        await start(message, state)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§î –ü–æ–ø—Ä–æ–±—É–π /menu –∏–ª–∏ /start")

async def check_subscriptions(bot):
    while True:
        data = load_data()
        now = datetime.now()
        tomorrow_date = (now + timedelta(days=1)).date()

        for user_id, user_data in data.items():
            lang = user_data.get("lang", "ru")
            subs = user_data.get("subs", [])

            reminder_texts = {
                "reminder": {
                    "ru": "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–°–∫–æ—Ä–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ <b>{name}</b>.",
                    "uz": "üîî Eslatma!\nObuna <b>{name}</b> bo‚Äòyicha to‚Äòlov yaqinlashmoqda.",
                    "en": "üîî Reminder!\nPayment for subscription <b>{name}</b> is coming soon."
                },
                "today": {
                    "ru": "üí∞ –û–ø–ª–∞—Ç–∞ ‚Äî <b>—Å–µ–≥–æ–¥–Ω—è!</b>",
                    "uz": "üí∞ To‚Äòlov ‚Äî <b>bugun!</b>",
                    "en": "üí∞ Payment ‚Äî <b>today!</b>"
                },
                "tomorrow": {
                    "ru": "üìÖ –û–ø–ª–∞—Ç–∞ ‚Äî <b>–∑–∞–≤—Ç—Ä–∞!</b>",
                    "uz": "üìÖ To‚Äòlov ‚Äî <b>ertaga!</b>",
                    "en": "üìÖ Payment ‚Äî <b>tomorrow!</b>"
                },
                "days_left": {
                    "ru": "üóì –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {days} –¥–Ω. ‚Äî <b>{name}</b>",
                    "uz": "üóì {days} kunga to‚Äòlov ‚Äî <b>{name}</b>",
                    "en": "üóì Payment in {days} days ‚Äî <b>{name}</b>"
                }
            }

            for sub in subs:
                try:
                    day = int(sub.get("day", 0))
                except ValueError:
                    continue

                last_notified = sub.get("last_notified", "")
                next_payment_date = datetime(now.year, now.month, day).date()

                # –ï—Å–ª–∏ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã —É–∂–µ –ø—Ä–æ—à—ë–ª, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                if next_payment_date < now.date():
                    next_month = (now.month % 12) + 1
                    next_year = now.year + (1 if next_month == 1 else 0)
                    try:
                        next_payment_date = datetime(next_year, next_month, day).date()
                    except ValueError:
                        continue  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è

                days_to_payment = (next_payment_date - now.date()).days

                # üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3, 2 –∏–ª–∏ 1 –¥–µ–Ω—å (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å <= 3 –¥–Ω—è)
                if 0 < days_to_payment <= 3 and last_notified != str(now.date()):
                    text = reminder_texts["reminder"][lang].format(name=sub.get("name")) \
                           + "\n" + reminder_texts["days_left"][lang].format(days=days_to_payment, name=sub.get("name"))
                    try:
                        await bot.send_message(int(user_id), text, parse_mode="HTML")
                        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ {days_to_payment} –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    sub["last_notified"] = str(now.date())

                # üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–∑–∞–≤—Ç—Ä–∞" ‚Äî —Ç–æ–ª—å–∫–æ –≤ 9:00
                elif next_payment_date == tomorrow_date and last_notified != str(now.date()):
                    if now.hour == 9:
                        text = reminder_texts["reminder"][lang].format(name=sub.get("name")) \
                               + "\n" + reminder_texts["tomorrow"][lang]
                        try:
                            await bot.send_message(int(user_id), text, parse_mode="HTML")
                            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        sub["last_notified"] = str(now.date())

                # üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "—Å–µ–≥–æ–¥–Ω—è"
                elif next_payment_date == now.date() and last_notified != str(now.date()):
                    text = reminder_texts["reminder"][lang].format(name=sub.get("name")) \
                           + "\n" + reminder_texts["today"][lang]
                    try:
                        await bot.send_message(int(user_id), text, parse_mode="HTML")
                        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    sub["last_notified"] = str(now.date())

            data[user_id]["subs"] = subs

        save_data(data)
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


# ====== –ó–ê–ü–£–°–ö ======
async def main():
    asyncio.create_task(check_subscriptions(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())