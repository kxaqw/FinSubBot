import asyncio
import httpx
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "8194473719:AAGv2nAUpEFRDd4_L0ufE95CMuZ3omhrniE"
DATA_FILE = "subscriptions.json"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

USD_to_UZS = 11500  # –∫—É—Ä—Å

# ============ FSM ============
class AddSub(StatesGroup):
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_currency = State()
    waiting_for_day = State()

class MonthCurrency(StatesGroup):
    waiting_for_currency = State()

# ============ JSON ============
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def get_after_add_keyboard(lang="ru") -> InlineKeyboardMarkup:
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    button_texts = {
        "ru": ["üëâ –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏", "üè† –í –º–µ–Ω—é"],
        "uz": ["üëâ Yana qo‚Äòshish", "üìã Barcha obunalarni ko‚Äòrish", "üè† Menyuga"],
        "en": ["üëâ Add more", "üìã Show all subscriptions", "üè† Main menu"]
    }

    texts = button_texts.get(lang, button_texts["ru"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts[0], callback_data="add_more")],
        [InlineKeyboardButton(text=texts[1], callback_data="show_list")],
        [InlineKeyboardButton(text=texts[2], callback_data="main_menu")]
    ])
    return keyboard


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø ======
@dp.callback_query(lambda c: c.data == "add_more")
async def add_more_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await add_subscription(callback.message, state)  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞

@dp.callback_query(lambda c: c.data == "show_list")
async def show_list_callback(callback: types.CallbackQuery):
    await callback.answer()
    user_id = str(callback.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"subs": [], "lang": "ru"})
    subs = user_data.get("subs", [])
    lang = user_data.get("lang", "ru")

    if not subs:
        texts = {
            "ru": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ üí°",
            "uz": "Sizda hali obunalar yo‚Äòq üí°",
            "en": "You don't have any subscriptions üí°"
        }
        await callback.message.answer(texts.get(lang, texts["ru"]))
        return

    headers = {
        "ru": "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n",
        "uz": "üìã Sizning obunalaringiz:\n\n",
        "en": "üìã Your subscriptions:\n\n"
    }
    text = headers.get(lang, headers["ru"])

    for i, s in enumerate(subs, start=1):
        day_texts = {
            "ru": f"—Å–ø–∏—Å–∞–Ω–∏–µ {s.get('day')} —á–∏—Å–ª–∞",
            "uz": f"to‚Äòlov {s.get('day')} kuni",
            "en": f"billing on {s.get('day')}"
        }
        text += f"{i}. {s.get('name')} ‚Äî {s.get('price')} {s.get('currency')} ‚Äî {day_texts.get(lang, day_texts['ru'])}\n"

    await callback.message.answer(text)

@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await start(callback.message, state)


# ====== –°–°–´–õ–ö–ò –î–õ–Ø –û–¢–ú–ï–ù–´ ======
CANCEL_LINKS = {
    "Netflix": "https://www.netflix.com/cancelplan",
    "Spotify": "https://support.spotify.com/article/cancel-your-subscription/",
    "YouTube Premium": "https://support.google.com/youtube/answer/6306276",
    "Adobe": "https://account.adobe.com/plans",
    "ChatGPT": "https://help.openai.com/en/articles/6825453-how-do-i-cancel-my-subscription",
    "HBO Max": "https://www.hbomax.com/account/cancel",
    "Disney+": "https://www.disneyplus.com/cancel",
    "Amazon Prime": "https://www.amazon.com/gp/help/customer/display.html?nodeId=201910960",
    "Apple Music": "https://support.apple.com/en-us/HT202039",
    "Tidal": "https://support.tidal.com/hc/en-us/articles/215855847-Cancel-your-TIDAL-subscription"
}

# ============ /start ============
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="üá∫üáø O‚Äòzbekcha", callback_data="lang_uz")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
    ])
    await message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang / Choose your language:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]
    user_id = str(callback.from_user.id)
    data = load_data()
    if user_id not in data or isinstance(data[user_id], list):
        data[user_id] = {"subs": [], "lang": lang}
    else:
        data[user_id]["lang"] = lang
    save_data(data)
    texts = {
        "ru": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/list ‚Äî —Å–ø–∏—Å–æ–∫\n/month ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü\n/soon ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "uz": "‚úÖ Til o‚Äòrnatildi: O‚Äòzbekcha\n\nBuyruqlar:\n/add ‚Äî obuna qo‚Äòshish\n/list ‚Äî obunalar ro‚Äòyxati\n/month ‚Äî oylik xarajatlar\n/soon ‚Äî yaqin to‚Äòlovlar\n/cancel ‚Äî obunani bekor qilish",
        "en": "‚úÖ Language set: English\n\nCommands:\n/add ‚Äî add a subscription\n/list ‚Äî list of subscriptions\n/month ‚Äî monthly expenses\n/soon ‚Äî upcoming payments\n/cancel ‚Äî cancel subscription"
    }
    await callback.message.answer(texts[lang])
    await callback.answer()

# ============ /add ============
@dp.message(Command("add"))
async def add_subscription(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    user_data = load_data().get(user_id, {"subs": [], "lang": "ru"})
    lang = user_data.get("lang", "ru")

    prompts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix):",
        "uz": "Obuna nomini kiriting (masalan, Netflix):",
        "en": "Enter subscription name (e.g., Netflix):"
    }
    await message.answer(prompts.get(lang, prompts["ru"]))
    await state.set_state(AddSub.waiting_for_name)


# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ ======
@dp.message(AddSub.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    user_id = str(message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"subs": [], "lang": "ru"})
    lang = user_data.get("lang", "ru")
    subs = user_data.get("subs", [])

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    duplicate_texts = {
        "ru": f"‚ö† –ü–æ–¥–ø–∏—Å–∫–∞ '{name}' —É–∂–µ –µ—Å—Ç—å. –•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å?",
        "uz": f"‚ö† '{name}' obunasi allaqachon mavjud. Uni yangilamoqchimisiz?",
        "en": f"‚ö† Subscription '{name}' already exists. Do you want to replace it?"
    }
    prompt_price_texts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.99):",
        "uz": "Obuna narxini kiriting (masalan, 10.99):",
        "en": "Enter subscription price (e.g., 10.99):"
    }

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    button_texts = {
        "ru": ["‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å", "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å"],
        "uz": ["‚úÖ Ha, yangilash", "‚ùå Yo'q, qoldirish"],
        "en": ["‚úÖ Yes, replace", "‚ùå No, keep"]
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if any(s.get("name", "").lower() == name.lower() for s in subs):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=button_texts.get(lang, button_texts["ru"])[0],
                                     callback_data=f"replace_yes_{name}"),
                InlineKeyboardButton(text=button_texts.get(lang, button_texts["ru"])[1],
                                     callback_data=f"replace_no_{name}")
            ]
        ])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö FSM
        await state.update_data(duplicate_name=name)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        await message.answer(duplicate_texts.get(lang, duplicate_texts["ru"]), reply_markup=keyboard)
        return  # –ù–ï –æ—á–∏—â–∞–µ–º state

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    await state.update_data(name=name)
    await message.answer(prompt_price_texts.get(lang, prompt_price_texts["ru"]))
    await state.set_state(AddSub.waiting_for_price)

# ====== Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ ¬´–î–∞/–ù–µ—Ç¬ª ======
@dp.callback_query(lambda c: c.data.startswith("replace_"))
async def process_replace(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    parts = callback.data.split("_", 2)
    action = parts[1]  # yes / no
    duplicate_name = parts[2]  # –∏–º—è –ø–æ–¥–ø–∏—Å–∫–∏
    user_id = str(callback.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"subs": [], "lang": "ru"})
    subs = user_data.get("subs", [])
    lang = user_data.get("lang", "ru")

    # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    deleted_texts = {
        "ru": f"–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{duplicate_name}' —É–¥–∞–ª–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:",
        "uz": f"'{duplicate_name}' obunasi o‚Äòchirildi. Yangi obuna nomini kiriting:",
        "en": f"Old subscription '{duplicate_name}' removed. Enter the name of the new subscription:"
    }
    kept_texts = {
        "ru": f"–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{duplicate_name}' –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚úÖ",
        "uz": f"'{duplicate_name}' obunasi saqlandi ‚úÖ",
        "en": f"Old subscription '{duplicate_name}' kept ‚úÖ"
    }

    if action == "yes":
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subs = [s for s in subs if s.get("name", "").lower() != duplicate_name.lower()]
        user_data["subs"] = subs
        data[user_id] = user_data
        save_data(data)

        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await state.clear()
        await callback.message.answer(deleted_texts.get(lang, deleted_texts["ru"]))
        await state.set_state(AddSub.waiting_for_name)

    else:
        await callback.message.answer(kept_texts.get(lang, kept_texts["ru"]))
        await state.clear()  # –æ—á–∏—â–∞–µ–º FSM, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

@dp.message(AddSub.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    try:
        price = float(str(message.text.strip()).replace(" ", "").replace(",", "."))
    except ValueError:
        texts = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 12.5",
            "uz": "Raqam kiriting, masalan 12.5",
            "en": "Enter a number, e.g., 12.5"
        }
        await message.answer(texts.get(lang, texts["ru"]))
        return

    await state.update_data(price=price)

    texts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (USD –∏–ª–∏ UZS):",
        "uz": "Valyutani kiriting (USD yoki UZS):",
        "en": "Enter currency (USD or UZS):"
    }
    await message.answer(texts.get(lang, texts["ru"]))
    await state.set_state(AddSub.waiting_for_currency)


@dp.message(AddSub.waiting_for_currency)
async def process_currency(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    currency = message.text.strip().upper()
    if currency not in ["USD", "UZS"]:
        texts = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ USD –∏–ª–∏ UZS:",
            "uz": "Faqat USD yoki UZS kiriting:",
            "en": "Enter only USD or UZS:"
        }
        await message.answer(texts.get(lang, texts["ru"]))
        return

    await state.update_data(currency=currency)
    texts = {
        "ru": "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Å–ø–∏—Å–∞–Ω–∏—è (1‚Äì31):",
        "uz": "To‚Äòlov kunini kiriting (1‚Äì31):",
        "en": "Enter the billing day (1‚Äì31):"
    }
    await message.answer(texts.get(lang, texts["ru"]))
    await state.set_state(AddSub.waiting_for_day)

@dp.message(AddSub.waiting_for_day)
async def process_day(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    try:
        day = int(message.text.strip())
        if not (1 <= day <= 31):
            raise ValueError
    except ValueError:
        texts = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (1‚Äì31):",
            "uz": "To‚Äòlov kunini to‚Äòg‚Äòri kiriting (1‚Äì31):",
            "en": "Enter a valid day of the month (1‚Äì31):"
        }
        await message.answer(texts.get(lang, texts["ru"]))
        return

    user_data = data.get(user_id, {"subs": [], "lang": lang})
    if isinstance(user_data, list):
        user_data = {"subs": user_data, "lang": lang}
    subs = user_data["subs"]
    sub_data = await state.get_data()
    subs.append({
        "name": sub_data["name"],
        "price": sub_data["price"],
        "currency": sub_data["currency"],
        "day": day,
        "start": datetime.now().strftime("%Y-%m-%d"),
        "last_notified": None
    })
    user_data["subs"] = subs
    data[user_id] = user_data
    save_data(data)
    await state.clear()

    texts_added = {
        "ru": f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüé¨ {sub_data['name']} ‚Äî {sub_data['price']} {sub_data['currency']} / –º–µ—Å\nüí≥ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {day} —á–∏—Å–ª–∞\n\n‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 24 —á–∞—Å–∞ –¥–æ –¥–∞—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è.",
        "uz": f"‚úÖ Obuna qo‚Äòshildi!\n\nüé¨ {sub_data['name']} ‚Äî {sub_data['price']} {sub_data['currency']} / oy\nüí≥ Keyingi to‚Äòlov: {day}-kun\n\n‚ÑπÔ∏è Xabarnoma to‚Äòlovdan 24 soat oldin keladi.",
        "en": f"‚úÖ Subscription added!\n\nüé¨ {sub_data['name']} ‚Äî {sub_data['price']} {sub_data['currency']} / month\nüí≥ Next payment: day {day}\n\n‚ÑπÔ∏è Notification will arrive 24 hours before the payment date."
    }
    await message.answer(texts_added.get(lang, texts_added["ru"]),
                         reply_markup=get_after_add_keyboard(lang))

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ä–∞–∑—É
    now = datetime.now()
    today = now.day
    tomorrow = (now + timedelta(days=1)).day
    if day in [today, tomorrow]:
        texts_notify = {
            "ru": f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–°–∫–æ—Ä–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ <b>{sub_data['name']}</b>.",
            "uz": f"üîî Eslatma!\nTez orada <b>{sub_data['name']}</b> obunasi uchun to‚Äòlov.",
            "en": f"üîî Reminder!\nUpcoming payment for subscription <b>{sub_data['name']}</b>."
        }
        notify_text = texts_notify.get(lang, texts_notify["ru"])
        if day == today:
            day_text = {"ru": "\nüí∞ –û–ø–ª–∞—Ç–∞ ‚Äî <b>—Å–µ–≥–æ–¥–Ω—è!</b>",
                        "uz": "\nüí∞ To‚Äòlov ‚Äî <b>bugun!</b>",
                        "en": "\nüí∞ Payment ‚Äî <b>today!</b>"}
        else:
            day_text = {"ru": "\nüìÖ –û–ø–ª–∞—Ç–∞ ‚Äî <b>–∑–∞–≤—Ç—Ä–∞!</b>",
                        "uz": "\nüìÖ To‚Äòlov ‚Äî <b>ertaga!</b>",
                        "en": "\nüìÖ Payment ‚Äî <b>tomorrow!</b>"}
        notify_text += day_text.get(lang, day_text["ru"])
        await message.answer(notify_text, parse_mode="HTML")

        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        subs[-1]["last_notified"] = str(now.date())
        data[user_id] = user_data
        save_data(data)

# ============ /list ============
@dp.message(Command("list"))
async def list_subscriptions(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])

    no_subs_text = {
        "ru": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ üí°",
        "uz": "Sizda hozircha obunalar yo‚Äòq üí°",
        "en": "You have no subscriptions yet üí°"
    }

    if not subs:
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        return

    list_text = {
        "ru": "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n",
        "uz": "üìã Sizning obunalaringiz:\n\n",
        "en": "üìã Your subscriptions:\n\n"
    }
    text = list_text.get(lang, list_text["ru"])
    for i, s in enumerate(subs, start=1):
        if lang == "ru":
            text += f"{i}. {s.get('name')} ‚Äî {s.get('price')} {s.get('currency')} ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ {s.get('day')} —á–∏—Å–ª–∞\n"
        elif lang == "uz":
            text += f"{i}. {s.get('name')} ‚Äî {s.get('price')} {s.get('currency')} ‚Äî to‚Äòlov {s.get('day')} kuni\n"
        else:
            text += f"{i}. {s.get('name')} ‚Äî {s.get('price')} {s.get('currency')} ‚Äî payment on day {s.get('day')}\n"
    await message.answer(text)


import httpx

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ USD ‚Üí UZS
async def fetch_usd_to_uzs():
    global USD_to_UZS
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("https://open.er-api.com/v6/latest/USD")
            data = response.json()
            USD_to_UZS = data["rates"]["UZS"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD‚ÜíUZS: {e}")
        USD_to_UZS = 11500  # –∑–∞–ø–∞—Å–Ω–æ–π –∫—É—Ä—Å


# ============ /month ============
@dp.message(Command("month"))
async def month_expenses_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")

    prompt_text = {
        "ru": "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã? (USD –∏–ª–∏ UZS)\nüí° –ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ UZS –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ USD, —Å—É–º–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É.",
        "uz": "Xarajatlarni qaysi valyutada ko‚Äòrsatish? (USD yoki UZS)\nüí° Agar USDdagi obuna uchun UZSni tanlasangiz, summa joriy kurs bo‚Äòyicha hisoblanadi.",
        "en": "In which currency to show expenses? (USD or UZS)\nüí° If you choose UZS for a subscription in USD, the amount will be converted at the current rate."
    }
    await message.answer(prompt_text.get(lang, prompt_text["ru"]))
    await state.set_state(MonthCurrency.waiting_for_currency)

@dp.message(MonthCurrency.waiting_for_currency)
async def month_expenses_calc(message: types.Message, state: FSMContext):
    currency_choice = message.text.strip().upper()
    if currency_choice not in ["USD", "UZS"]:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ USD –∏–ª–∏ UZS / Faqat USD yoki UZS kiriting / Enter only USD or UZS")
        return

    user_id = str(message.from_user.id)
    user_data = load_data().get(user_id, {})
    lang = user_data.get("lang", "ru")
    subs = user_data.get("subs", [])

    if not subs:
        no_subs_text = {
            "ru": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            "uz": "Sizda faollashgan obunalar yo‚Äòq.",
            "en": "You have no active subscriptions."
        }
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
    await fetch_usd_to_uzs()

    total = 0.0
    for s in subs:
        price = float(str(s.get("price", 0)).replace(" ", "").replace(",", "."))
        sub_currency = s.get("currency", "USD").upper()
        if sub_currency != currency_choice:
            if sub_currency == "USD" and currency_choice == "UZS":
                price *= USD_to_UZS
            elif sub_currency == "UZS" and currency_choice == "USD":
                price /= USD_to_UZS
        total += price

    total_text = {
        "ru": f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {total:.2f} {currency_choice}",
        "uz": f"üí∞ Oy davomida umumiy xarajatlar: {total:.2f} {currency_choice}",
        "en": f"üí∞ Total monthly expenses: {total:.2f} {currency_choice}"
    }
    await message.answer(total_text.get(lang, total_text["ru"]))
    await state.clear()



@dp.message(MonthCurrency.waiting_for_currency)
async def month_expenses_calc(message: types.Message, state: FSMContext):
    currency_choice = message.text.strip().upper()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    if currency_choice not in ["USD", "UZS"]:
        invalid_text = {
            "ru": "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ USD –∏–ª–∏ UZS:",
            "uz": "Faqat USD yoki UZS kiriting:",
            "en": "Enter only USD or UZS:"
        }
        await message.answer(invalid_text.get(lang, invalid_text["ru"]))
        return

    subs = data.get(user_id, {}).get("subs", [])
    if not subs:
        no_subs_text = {
            "ru": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            "uz": "Sizda faollashtirilgan obunalar yo‚Äòq.",
            "en": "You have no active subscriptions."
        }
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        await state.clear()
        return

    total = 0.0
    for s in subs:
        price = float(str(s.get("price", 0)).replace(" ", "").replace(",", "."))
        sub_currency = s.get("currency", "USD").upper()
        if sub_currency != currency_choice:
            price = price * USD_to_UZS if sub_currency == "USD" else price / USD_to_UZS
        total += price

    total_text = {
        "ru": f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {total:.2f} {currency_choice}",
        "uz": f"üí∞ Oy bo‚Äòyicha umumiy xarajatlar: {total:.2f} {currency_choice}",
        "en": f"üí∞ Total expenses for the month: {total:.2f} {currency_choice}"
    }
    await message.answer(total_text.get(lang, total_text["ru"]))
    await state.clear()


@dp.message(Command("soon"))
async def soon_subscriptions(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])

    no_subs_text = {
        "ru": "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ üí°",
        "uz": "Sizda obunalar yo‚Äòq üí°",
        "en": "You have no subscriptions üí°"
    }

    if not subs:
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        return

    now = datetime.now()
    soon_list = []
    for s in subs:
        try:
            day = int(s.get("day", 0))
        except ValueError:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —á–∏—Å–ª–æ
        delta = day - now.day
        if 0 <= delta <= 7:
            soon_list.append((s.get("name"), day, delta))

    no_soon_text = {
        "ru": "üìÜ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ—Ç.",
        "uz": "üìÜ Ushbu haftada to‚Äòlovlar yo‚Äòq.",
        "en": "üìÜ No payments this week."
    }

    if not soon_list:
        await message.answer(no_soon_text.get(lang, no_soon_text["ru"]))
        return

    header_text = {
        "ru": "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è:\n",
        "uz": "üìÖ Yaqin to‚Äòlovlar:\n",
        "en": "üìÖ Upcoming payments:\n"
    }

    text = header_text.get(lang, header_text["ru"])
    for name, day, delta in soon_list:
        if lang == "ru":
            if delta == 0:
                text += f"‚Äî {name}: —Å–µ–≥–æ–¥–Ω—è\n"
            elif delta == 1:
                text += f"‚Äî {name}: –∑–∞–≤—Ç—Ä–∞ ({day} —á–∏—Å–ª–æ)\n"
            else:
                text += f"‚Äî {name}: —á–µ—Ä–µ–∑ {delta} –¥–Ω. ({day} —á–∏—Å–ª–æ)\n"
        elif lang == "uz":
            if delta == 0:
                text += f"‚Äî {name}: bugun\n"
            elif delta == 1:
                text += f"‚Äî {name}: ertaga ({day}-kun)\n"
            else:
                text += f"‚Äî {name}: {delta} kunda ({day}-kun)\n"
        else:  # en
            if delta == 0:
                text += f"‚Äî {name}: today\n"
            elif delta == 1:
                text += f"‚Äî {name}: tomorrow (day {day})\n"
            else:
                text += f"‚Äî {name}: in {delta} days (day {day})\n"

    await message.answer(text)


# ============ /cancel ============
@dp.message(Command("cancel"))
async def choose_cancel_subscription(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])
    valid_subs = [s for s in subs if isinstance(s, dict) and "name" in s]

    no_subs_text = {
        "ru": "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã üòå",
        "uz": "Sizda bekor qilinadigan obunalar yo‚Äòq üòå",
        "en": "You have no subscriptions to cancel üòå"
    }

    choose_text = {
        "ru": "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å:",
        "uz": "Bekor qilmoqchi bo‚Äòlgan obunani tanlang:",
        "en": "Choose a subscription to cancel:"
    }

    if not valid_subs:
        await message.answer(no_subs_text.get(lang, no_subs_text["ru"]))
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=sub["name"], callback_data=f"cancel_{sub['name']}")] for sub in valid_subs]
    )
    await message.answer(choose_text.get(lang, choose_text["ru"]), reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("cancel_"))
async def process_cancel_callback(callback: types.CallbackQuery):
    await callback.answer()
    sub_name = callback.data.replace("cancel_", "")
    user_id = str(callback.from_user.id)
    data = load_data()
    lang = data.get(user_id, {}).get("lang", "ru")
    subs = data.get(user_id, {}).get("subs", [])

    sub_to_remove = next((s for s in subs if isinstance(s, dict) and s.get("name") == sub_name), None)

    not_found_text = {
        "ru": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòÖ",
        "uz": "Obuna topilmadi üòÖ",
        "en": "Subscription not found üòÖ"
    }

    if not sub_to_remove:
        await callback.message.edit_text(not_found_text.get(lang, not_found_text["ru"]))
        return

    cancel_link = CANCEL_LINKS.get(sub_name)

    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subs = [s for s in subs if not (isinstance(s, dict) and s.get("name") == sub_name)]
    data[user_id]["subs"] = subs
    save_data(data)

    deleted_text = {
        "ru": f"–ü–æ–¥–ø–∏—Å–∫–∞ '{sub_name}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚úÖ",
        "uz": f"'{sub_name}' obunasi ro‚Äòyxatdan o‚Äòchirildi ‚úÖ",
        "en": f"Subscription '{sub_name}' removed from the list ‚úÖ"
    }

    if cancel_link:
        link_text = {
            "ru": f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã {sub_name}:\n{cancel_link}\n\n–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ",
            "uz": f"üîó {sub_name} obunasini bekor qilish havolasi:\n{cancel_link}\n\nObuna o‚Äòchirildi ‚úÖ",
            "en": f"üîó Cancel link for {sub_name}:\n{cancel_link}\n\nSubscription removed ‚úÖ"
        }
        await callback.message.edit_text(link_text.get(lang, link_text["ru"]))
    else:
        await callback.message.edit_text(deleted_text.get(lang, deleted_text["ru"]))


# ============ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –∫–æ–º–∞–Ω–¥ ============
@dp.message(F.text.regexp(r"^/"))
async def handle_any_command(message: types.Message, state: FSMContext):
    await state.clear()
    cmd = message.text.lower()
    if cmd.startswith("/add"):
        await add_subscription(message, state)
    elif cmd.startswith("/list"):
        await list_subscriptions(message, state)
    elif cmd.startswith("/month"):
        await month_expenses_start(message, state)
    elif cmd.startswith("/soon"):
        await soon_subscriptions(message, state)
    elif cmd.startswith(("/cancel", "/menu", "/start")):
        await start(message, state)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§î –ü–æ–ø—Ä–æ–±—É–π /menu –∏–ª–∏ /start")


async def check_subscriptions(bot):
    while True:
        data = load_data()
        now = datetime.now()
        today = now.day
        tomorrow = (now + timedelta(days=1)).day  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞

        for user_id, user_data in data.items():
            lang = user_data.get("lang", "ru")  # —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
            subs = user_data.get("subs", [])

            # –¢–µ–∫—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Ç—Ä—ë—Ö —è–∑—ã–∫–∞—Ö
            reminder_texts = {
                "reminder": {
                    "ru": "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–°–∫–æ—Ä–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ <b>{name}</b>.",
                    "uz": "üîî Eslatma!\nObuna <b>{name}</b> bo‚Äòyicha to‚Äòlov yaqinlashmoqda.",
                    "en": "üîî Reminder!\nPayment for subscription <b>{name}</b> is coming soon."
                },
                "today": {
                    "ru": "üí∞ –û–ø–ª–∞—Ç–∞ ‚Äî <b>—Å–µ–≥–æ–¥–Ω—è!</b>",
                    "uz": "üí∞ To‚Äòlov ‚Äî <b>bugun!</b>",
                    "en": "üí∞ Payment ‚Äî <b>today!</b>"
                },
                "tomorrow": {
                    "ru": "üìÖ –û–ø–ª–∞—Ç–∞ ‚Äî <b>–∑–∞–≤—Ç—Ä–∞!</b>",
                    "uz": "üìÖ To‚Äòlov ‚Äî <b>ertaga!</b>",
                    "en": "üìÖ Payment ‚Äî <b>tomorrow!</b>"
                }
            }

            for sub in subs:
                try:
                    day = int(sub.get("day", 0))
                except ValueError:
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —á–∏—Å–ª–æ

                last_notified = sub.get("last_notified", "")  # –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

                # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—â—ë –Ω–µ –±—ã–ª–æ
                if day in [today, tomorrow] and last_notified != str(now.date()):
                    text = reminder_texts["reminder"][lang].format(name=sub.get("name"))

                    if day == today:
                        text += "\n" + reminder_texts["today"][lang]
                    else:
                        text += "\n" + reminder_texts["tomorrow"][lang]

                    try:
                        await bot.send_message(int(user_id), text, parse_mode="HTML")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                    sub["last_notified"] = str(now.date())

                    if day == today:
                        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    else:
                        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            data[user_id]["subs"] = subs

        save_data(data)
        await asyncio.sleep(3600)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å


# ====== –ó–ê–ü–£–°–ö ======
async def main():
    asyncio.create_task(check_subscriptions(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())